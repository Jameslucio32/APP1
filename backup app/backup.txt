<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Offline Product Form</title>
  <style>
    body {
        font-family: Arial, sans-serif;
        background-color: #f4f7fc;
        margin: 0;
        padding: 0;
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        flex-direction: column;
    }

    .container {
        background-color: #fff;
        padding: 30px;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        width: 100%;
        max-width: 600px;
        box-sizing: border-box;
        margin-bottom: 30px;
    }

    h3 {
        text-align: center;
        margin-bottom: 20px;
        color: #333;
    }

    label {
        font-weight: bold;
        margin-bottom: 8px;
        display: block;
        color: #555;
    }

    input[type="text"],
    input[type="number"],
    input[type="date"],
    textarea,
    input[type="file"] {
        width: 100%;
        padding: 10px;
        margin-bottom: 20px;
        border: 1px solid #ddd;
        border-radius: 4px;
        font-size: 16px;
        box-sizing: border-box;
    }

    textarea {
        resize: vertical;
    }

    .form-row {
        display: flex;
        flex-wrap: wrap;
        justify-content: space-between;
        gap: 20px;
    }

    .form-row div {
        flex: 1 1 calc(50% - 10px);
    }

    .form-row div input[type="number"] {
        width: 100%;
    }

    .btn {
        padding: 12px 25px;
        background-color: #28a745;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 16px;
        width: 100%;
    }

    .btn:hover {
        background-color: #218838;
    }

    .alert {
        padding: 10px;
        margin: 20px 0;
        background-color: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
        border-radius: 4px;
        display: none;
    }

    .alert.success {
        background-color: #d4edda;
        color: #155724;
        border-color: #c3e6cb;
    }

    .product-list {
        margin-top: 30px;
        width: 100%;
        max-width: 600px;
        box-sizing: border-box;
    }

    .product-item {
        padding: 10px;
        background-color: #f1f1f1;
        margin: 10px 0;
        border-radius: 4px;
    }

    .product-item h4 {
        margin: 0;
        color: #333;
    }

    .product-item p {
        margin: 5px 0;
        color: #555;
    }
  </style>

<script>
function isOnline() {
    return navigator.onLine;
}

const maxItems = 50;

function saveFormData() {
    const prodName = document.getElementById('prod_name').value;
    const prodCode = document.getElementById('prod_code').value;
    const prodDesc = document.getElementById('prod_desc').value;
    const prodPrice = document.getElementById('prod_price').value;
    const prodStock = document.getElementById('prod_stock').value;
    const prodExpiryDate = document.getElementById('prod_expiry_date').value;
    const prodImg = document.getElementById('prod_img').files[0];

    if (prodImg) {
        const reader = new FileReader();
        reader.onload = function(event) {
            const base64Image = event.target.result;

            storeProduct({
                prodName,
                prodCode,
                prodDesc,
                prodPrice,
                prodStock,
                prodExpiryDate,
                prodImg: base64Image
            });
        };
        reader.readAsDataURL(prodImg);
    } else {
        storeProduct({
            prodName,
            prodCode,
            prodDesc,
            prodPrice,
            prodStock,
            prodExpiryDate,
            prodImg: null
        });
    }
}

function storeProduct(productData) {
    try {
        let storedProducts = JSON.parse(localStorage.getItem('products')) || [];

        if (storedProducts.length >= maxItems) {
            storedProducts.shift();
        }

        storedProducts.push(productData);
        localStorage.setItem('products', JSON.stringify(storedProducts));
        displayStoredProducts();
    } catch (error) {
        console.error('Error saving data to localStorage:', error);
        alert('Storage full or error saving! Please sync your data.');
    }
}

function syncDataWhenOnline() {
    if (isOnline()) {
        const storedProducts = JSON.parse(localStorage.getItem('products')) || [];

        if (storedProducts.length > 0) {
            storedProducts.forEach(product => {
                const formData = new FormData();
                formData.append('prod_name', product.prodName);
                formData.append('prod_code', product.prodCode);
                formData.append('prod_desc', product.prodDesc);
                formData.append('prod_price', product.prodPrice);
                formData.append('prod_stock', product.prodStock);
                formData.append('prod_expiry_date', product.prodExpiryDate);
                
                // Image is optional
                if (product.prodImg) {
                    const blob = dataURLtoBlob(product.prodImg);
                    formData.append('prod_img', blob, 'product-image.png');
                }

                fetch('https://mjrhub.site/index.php', {
                    method: 'POST',
                    body: formData
                })
                .then(response => response.json())
                .then(data => {
                    console.log('Sync response:', data);
                    if (data.status === 'success') {
                        console.log('Product synced:', product.prodName);
                    } else {
                        console.error('Failed to sync product:', product.prodName);
                    }
                })
                .catch(error => {
                    console.error('Sync error:', error);
                });
            });

            alert('All products synced successfully!');
            localStorage.removeItem('products');
            displayStoredProducts();
        }
    }
}

function loadOfflineData() {
    displayStoredProducts();
}

function displayStoredProducts() {
    const productListContainer = document.getElementById('product-list');
    const storedProducts = JSON.parse(localStorage.getItem('products')) || [];

    productListContainer.innerHTML = '';

    storedProducts.forEach(product => {
        const productItem = document.createElement('div');
        productItem.classList.add('product-item');
        productItem.innerHTML = `
            <h4>${product.prodName}</h4>
            <p><strong>Product Code:</strong> ${product.prodCode}</p>
            <p><strong>Price:</strong> ${product.prodPrice}</p>
            <p><strong>Stock:</strong> ${product.prodStock}</p>
            <p><strong>Description:</strong> ${product.prodDesc}</p>
            <p><strong>Expiration Date:</strong> ${product.prodExpiryDate || 'N/A'}</p>
            ${product.prodImg ? `<img src="${product.prodImg}" alt="Product Image" style="width: 100px; height: auto; margin-top:10px;">` : ''}
        `;
        productListContainer.appendChild(productItem);
    });
}

function showAlert(message) {
    const alertBox = document.createElement('div');
    alertBox.classList.add('alert', 'success');
    alertBox.innerText = message;
    document.querySelector('.container').prepend(alertBox);
    alertBox.style.display = 'block';
}

function generateProductCode() {
    const prodCodeInput = document.getElementById('prod_code');
    prodCodeInput.value = 'PROD-' + Math.random().toString(36).substr(2, 9).toUpperCase();
}

// Helper function to convert Base64 to Blob
function dataURLtoBlob(dataurl) {
    var arr = dataurl.split(','), mime = arr[0].match(/:(.*?);/)[1],
        bstr = atob(arr[1]), n = bstr.length, u8arr = new Uint8Array(n);
    while(n--){
        u8arr[n] = bstr.charCodeAt(n);
    }
    return new Blob([u8arr], {type:mime});
}

window.addEventListener('online', syncDataWhenOnline);

window.onload = function () {
    loadOfflineData();
    generateProductCode();

    document.getElementById('productForm').onsubmit = function (event) {
        if (!isOnline()) {
            event.preventDefault();
            saveFormData();
            alert('You are offline! Product saved locally.');
            showAlert('Product saved locally. Will sync when online.');
            document.getElementById('productForm').reset();
            generateProductCode();
        }
    };
};
</script>

</head>
<body>
<div class="container">
    <h3>Offline Product Form</h3>
    <form id="productForm" method="POST" enctype="multipart/form-data">
        <div class="form-row">
            <div>
                <label for="prod_name">Product Name</label>
                <input type="text" id="prod_name" name="prod_name" required>
            </div>
            <div>
                <label for="prod_code">Product Code</label>
                <input type="text" id="prod_code" name="prod_code" required readonly>
            </div>
        </div>

        <div class="form-row">
            <div>
                <label for="prod_img">Product Image</label>
                <input type="file" id="prod_img" name="prod_img" accept="image/*">
            </div>
            <div>
                <label for="prod_price">Price</label>
                <input type="number" id="prod_price" name="prod_price" required>
            </div>
        </div>

        <div class="form-row">
            <div>
                <label for="prod_stock">Stock</label>
                <input type="number" id="prod_stock" name="prod_stock" required>
            </div>
            <div>
                <label for="prod_expiry_date">Expiry Date</label>
                <input type="date" id="prod_expiry_date" name="prod_expiry_date">
            </div>
        </div>

        <div class="form-row">
            <div>
                <label for="prod_desc">Product Description</label>
                <textarea id="prod_desc" name="prod_desc" required></textarea>
            </div>
        </div>

        <button type="submit" class="btn">Save Product</button>
    </form>

    <div id="product-list" class="product-list"></div>
</div>
</body>
</html>
